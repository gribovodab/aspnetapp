<?xml version="1.0"?>
<doc>
    <assembly>
        <name>aspnetapp</name>
    </assembly>
    <members>
        <member name="T:aspnetapp.Controllers.HelloController">
            <summary>
            Hello controller
            </summary>
        </member>
        <member name="M:aspnetapp.Controllers.HelloController.#ctor(Microsoft.Extensions.Logging.ILogger{aspnetapp.Controllers.HelloController},aspnetapp.Services.IGreeterService)">
            <summary>
            Hello constructor
            </summary>
        </member>
        <member name="M:aspnetapp.Controllers.HelloController.SayHello(System.String)">
             <summary>
             Простой способ сказаьт HEllo
             </summary>
             <remarks>
             Запрос:
            
                 GET /hello/{name}
            
             </remarks>
             <param name="name"></param>
        </member>
        <member name="T:aspnetapp.Program">
            <summary>
            Program class
            </summary>
        </member>
        <member name="M:aspnetapp.Program.Main(System.String[])">
            <summary>
            Точка входа
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:aspnetapp.Program.CreateHostBuilder(System.String[])">
            <summary>
            Создание и настройка объекта
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:aspnetapp.Services.GreeterService">
            <summary>
            Greeting Service
            </summary>
        </member>
        <member name="M:aspnetapp.Services.GreeterService.SayHello(Greet.V1.HelloRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Метод, который принимает имя запроса и отвечает сообщением Hello.
            </summary>
            <param name="request"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:aspnetapp.Services.IGreeterService">
            <summary>
            Greeting Service
            </summary>
        </member>
        <member name="M:aspnetapp.Services.IGreeterService.SayHello(Greet.V1.HelloRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Метод, который принимает имя запроса и отвечает сообщением Hello.
            </summary>
            <param name="request"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:aspnetapp.Startup">
            <summary>
            Startup class
            </summary>
        </member>
        <member name="M:aspnetapp.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor injection
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:aspnetapp.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Метод для добавления служб в контейнер.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:aspnetapp.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Метод для настройки конвейера HTTP-запросов.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="T:Greet.V1.GreetReflection">
            <summary>Holder for reflection information generated from Protos/greet.proto</summary>
        </member>
        <member name="P:Greet.V1.GreetReflection.Descriptor">
            <summary>File descriptor for Protos/greet.proto</summary>
        </member>
        <member name="T:Greet.V1.HelloRequest">
            <summary>
            The request message containing the user's name.
            </summary>
        </member>
        <member name="F:Greet.V1.HelloRequest.NameFieldNumber">
            <summary>Field number for the "name" field.</summary>
        </member>
        <member name="T:Greet.V1.HelloReply">
            <summary>
            The response message containing the greetings.
            </summary>
        </member>
        <member name="F:Greet.V1.HelloReply.MessageFieldNumber">
            <summary>Field number for the "message" field.</summary>
        </member>
        <member name="T:Greet.V1.Greeter">
            <summary>
            The greeting service definition.
            </summary>
        </member>
        <member name="P:Greet.V1.Greeter.Descriptor">
            <summary>Service descriptor</summary>
        </member>
        <member name="T:Greet.V1.Greeter.GreeterBase">
            <summary>Base class for server-side implementations of Greeter</summary>
        </member>
        <member name="M:Greet.V1.Greeter.GreeterBase.SayHello(Greet.V1.HelloRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Sends a greeting
            </summary>
            <param name="request">The request received from the client.</param>
            <param name="context">The context of the server-side call handler being invoked.</param>
            <returns>The response to send back to the client (wrapped by a task).</returns>
        </member>
        <member name="M:Greet.V1.Greeter.BindService(Greet.V1.Greeter.GreeterBase)">
            <summary>Creates service definition that can be registered with a server</summary>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
        <member name="M:Greet.V1.Greeter.BindService(Grpc.Core.ServiceBinderBase,Greet.V1.Greeter.GreeterBase)">
            <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
            <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
            <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        </member>
    </members>
</doc>
